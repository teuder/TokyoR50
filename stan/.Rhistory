list(c("year", "month", "day")
, "carrier", "tailnum")
))
flights2
res <- tbl(db, sql("SELECT * FROM flights"))
res
select(res, year:day, dep_delay, arr_delay)
res_tbl <- tbl(db, sql("SELECT * FROM flights"))
select(flights_tbl, year:day, dep_delay, arr_delay)
tbl(db, sql("SELECT count(*) FROM flights"))
res<-
res_tbl %>%
select(res_tbl, year:day, dep_delay, arr_delay) %>%
filter(flights_sqlite, dep_delay > 240)
res<-
res_tbl %>%
select(year:day, dep_delay, arr_delay) %>%
filter(dep_delay > 240)
show_query(res)
class(res)
summary(res)
res[["src"]]
res[["from"]]
res[["select"]]
summary(res)
summary(db)
summary(flights2)
summary(res)
res[[where]]
res[["where"]]
res[["summarise"]]
res[["mutate"]]
res[["query"]]
res[["sql"]]
summary(res)
show_query(res)
res[["query"]]
summary(res_tbl)
class(res_tbl)
show_query(flights_tbl)
class(flights_tbl)
summary(flights_tbl)
res_tbl<-
flights_tbl %>%
select(year:day, dep_delay, arr_delay) %>%
filter(dep_delay > 240)
res_tbl<-
flights_tbl %>%
select(year:day, dep_delay, arr_delay) %>%
filter(dep_delay > 240)
show_query(res_tbl)
res_tbl[["query"]]
summary(res_tbl)
data <- collect(res_tbl)
data
summary(res_tbl)
c1 <- filter(flights_tbl, year == 2013, month == 1, day == 1)
c2 <- select(c1, year, month, day, carrier, dep_delay, air_time, distance)
c3 <- mutate(c2, speed = distance / air_time * 60)
c4 <- arrange(c3, year, month, day, carrier)
summary(c4)
c4
res_tbl[["src"]]
res_tbl["src"]
res_tbl$sec
res_tbl$sec
res_tbl$src
res_tbl$year
res_tbl$query
flights_tbl
res2<-
flights_tbl %>%
group_by(year, month) %>%
summarise(mean(arr_delay))
res2
res2<-
flights_tbl %>%
group_by(year, month) %>%
summarise(hoge=mean(arr_delay))
res2
flights_tbl %>%
group_by(year, month) %>%
summarise(hoge=mean(arr_delay)) %>%
arrange(year, month)
flights_tbl %>%
group_by(year, month) %>%
summarise(mean(arr_delay)) %>%
arrange(year, month)
show_query(res2)
q<-'
create table hoge as
(
SELECT "year", "month", "hoge"
FROM (SELECT "year", "month", AVG("arr_delay") AS "hoge"
FROM "flights"
GROUP BY "year", "month") AS "_W5"
)
'
q
a<-tbl(db, sql(q))
db
copy_to(db, res2, "test_table")
copy_to(db, collect(res2), "test_table")
library(RPostgreSQL)
con <- dbConnect("first_db")
con <- dbConnect(PostgreSQL(),"first_db")
con <- dbConnect(PostgreSQL(),dbname = "first_db")
res2$query
sql(res2$query)
show_query(res2)
as.character(show_query(res2))
sql
?sql
sql
res2$query
res2$query
res2<-
flights_tbl %>%
group_by(year, month) %>%
summarise(mean(arr_delay)) %>%
arrange(year, month)
res2$query
as.character(res2$query)
res2$query
class(res2$query)
res2$query$sql
str_replace_all
gsub("<SQL> ", "", res2$query$sql)
gsub("<SQL>", "", res2$query$sql)
as.character(res2$query$sql)
q <- res2$query$sql
q <- res2$query$sql
a <- dbSendQuery(con, q)
fetch(con,a)
fetch(a)
create.q <- paste("CREATE TABLE new_table as (", q, ")" )
create.q
a <- dbSendQuery(con, create.q)
fetch(a)
dbExistsTable(con, "new_table")
summary(res2)
summary(res24src)
summary(res2$src)
summary(res2$src$con)
create.q <- paste("CREATE TABLE new_table2 as (", q, ")" )
create.q <- paste("CREATE TABLE new_table2 as (", q, ")" )
dbExistsTable(res2$src$con, "new_table2")
create.q
res2$src$con
dbHasCompleted(res2$src$con)
dbListResults(res2$src$con)
dbIsValid(res2$src$con)
class(res2$src$con)
class(con)
con <- dbConnect(PostgreSQL(),dbname = "first_db")
class(con)
dbIsValid(con)
dbGetInfo(con)
dbGetInfo(res2$src$con)
create.q
dbSendQuery(res2$src$con, create.q)
dbExistsTable(res2$src$con, "new_table2")
install.packages("Shiny")
install.packages("shiny")
list.files()
library(dplyr)
?sql
sql(mean)
sql("mean")
escape("X")
escape("aaa''a")
?tbl
?tbl.src_postgres
class(flights_tbl)
flights_tbl <- tbl(db, "flights")
db <- src_postgres(dbname = "first_db")
flights_tbl <- tbl(db, "flights")
class(flights_tbl)
res_tbl<-
flights_tbl %>%
select(year:day, dep_delay, arr_delay) %>%
filter(dep_delay > 240)
?bind_rows
rbind_all()
?rbind_all
class(res_tbl)
res_tbl$query
summary(res_tbl)
str(res_tbl)
seed(71)
?set.seed(71)
#load("hierarchical.Rdata")
hier_dat <- list(N = length(y), y = y, M=10)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 1000, chains = 4)
library(rstan)
hier_dat <- list(N = length(y), y = y, M=10)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 1000, chains = 4)
setwd("~/Gdrive/Stan/TokyoR50準備/stan_code/")
load("hierarchical.Rdata")
hier_dat <- list(N = length(y), y = y, M=10)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 1000, chains = 4)
param_hier <- extract(fit_hier)
# alpha
print(alpha)            #真値
mean(param_hier$alpha) #推定値
hist(param_hier$alpha) #分布
# beta
print(beta)             #真値
mean(param_hier$beta)  #推定値
hist(param_hier$beta)  #分布
# alpha
print(alpha)            #真値
mean(param_hier$alpha) #推定値
hist(param_hier$alpha) #分布
# sigma
print(sigma)             #真値
mean(param_hier$beta)  #推定値
hist(param_hier$beta)  #分布
# alpha
print(alpha)            #真値
mean(param_hier$alpha) #推定値
hist(param_hier$alpha) #分布
# sigma
print(sigma)             #真値
mean(param_hier$beta)  #推定値
hist(param_hier$beta)  #分布
print(alpha)            #真値
mean(param_hier$alpha) #推定値
print(sigma)             #真値
mean(param_hier$beta)  #推定値
print(sigma)             #真値
mean(param_hier$sigma)  #推定値
hist(param_hier$besigmata)  #分布
# sigma
print(sigma)             #真値
mean(param_hier$sigma)  #推定値
hist(param_hier$sigma)  #分布
i <- 1
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
hist(param_hier$beta[,i]) #分布
dim(param_hier$beta)
param_hier$beta[,1000]
param_hier$beta[,100]
i <- 10
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
hist(param_hier$beta[,i]) #分布
hist(beta)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 1000, chains = 4)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 1000, chains = 4)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 1000, chains = 4)
param_hier <- extract(fit_hier)
hist(param_hier$y_hat)
hist(y)
hist(param_hier$y_hat)
hist(param_hier$y_hat, freq = FALSE)
param_hier$y_hat
dim(param_hier$y_hat)
dim(y)
y
hist(y, freq = FALSE)
hist(param_hier$y_hat, freq = FALSE)
hist(y, freq = FALSE)
hist(param_hier$y_hat, freq = FALSE)
library(MASS)
truehist(param_hier$y_hat, freq = FALSE)
truehist(y, freq = FALSE)
truehist(as.numeric(param_hier$y_hat), freq = FALSE)
as.numeric(param_hier$y_hat)
truehist(as.numeric(param_hier$y_hat))
# i番目の生徒の y
i <- 1
print(y[i])            #真値
mean(param_hier$y_hat[,i]) #推定値
hist(param_hier$y_hat[,i]) #分布
i <- 5
print(y[i])            #真値
mean(param_hier$y_hat[,i]) #推定値
colMeans(param_hier$y_hat[,i])
colMeans(param_hier$y_hat)
hist(colMeans(param_hier$y_hat))
d.obs  <- hist(y)
d.pred <- hist(colMeans(param_hier$y_hat)
)
d.pred
plot(d.obs$counts)
plot(d.obs$counts, col="black")
plot(d.obs$counts, col="black", pch=19)
points(d.pred$counts, col="red", pch=19)
plot(d.obs$counts, col="black", pch=19)
plot(d.obs$counts, col="black", pch=19)
points(d.pred$counts, col="red", pch=19)
#点数の予測値の分布
y.obs  <- hist(y)
y.prd <-  hist(colMeans(param_hier$y_hat))
plot(  y.obs$counts, col="black", pch=19)
points(y.prd$counts, col="red",   pch=19)
p.obs  <- hist(p)
p.prd <-  hist(colMeans(param_hier$y_hat))
plot(  p.obs$counts, col="black", pch=19)
points(p.prd$counts, col="red",   pch=19)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 1000, chains = 4)
#オブジェクトの保存
save(logistic, M, sigma, alpha, beta, p, y, data_hier, fit_hier, file = "hierarchical.Rdata")
param_hier <- extract(fit_hier)
i <- 5
print(y[i])                #真値
mean(param_hier$y_hat[,i]) #推定値
hist(param_hier$y_hat[,i], freq = FALSE) #観測値の予測値の事後分布（経験分布）
y.obs  <- hist(y)
y.prd <-  hist(colMeans(param_hier$y_hat))
plot(  y.obs$counts, col="black", pch=19)
points(y.prd$counts, col="red",   pch=19)
plot(  y.obs$counts, col="black", pch=19, xlab="点数", xlab="人数")
plot(  y.obs$counts, col="black", pch=19, xlab="点数", ylab="人数")
par(family="HiraKakuProN-W3")
plot(  y.obs$counts, col="black", pch=19, xlab="点数", ylab="人数")
points(y.prd$counts, col="red",   pch=19)
plot(  y.obs$counts, col="black", pch=19, xlab="テストの点数", ylab="人数")
points(y.prd$counts, col="red",   pch=19)
table(y)
a <- table(y)
a
z.obs  <- hist(z)
z.prd <-  hist(colMeans(param_hier$z))
plot(  z.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(z.prd$counts, col="red",   pch=19)
z <- alpha + beta #解答力
z.obs  <- hist(z)
z.prd <-  hist(colMeans(param_hier$z))
plot(  z.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(z.prd$counts, col="red",   pch=19)
fit_hier.old <-fit_hier
library(shinystan)
launch_shinystan(fit_hier)
fit_hier_v2 <- stan(file = "hierarchical.stan", data = data_hier, iter = 10000, chains = 4)
fit_hier_v2 <- stan(fit = fit_hier, data = data_hier, iter = 10000, chains = 4)
launch_shinystan(fit_hier_v2)
param_hier <- extract(fit_hier_v2)
y.obs  <- hist(y)
y.prd <-  hist(colMeans(param_hier$y_hat))
plot(  y.obs$counts, col="black", pch=19, xlab="テストの点数", ylab="人数")
points(y.prd$counts, col="red",   pch=19)
z.obs  <- hist(z)
z.prd <-  hist(colMeans(param_hier$z))
plot(  z.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(z.prd$counts, col="red",   pch=19)
print(alpha)           #真値
mean(param_hier$alpha) #推定値
hist(param_hier$alpha, freq = FALSE) #分布
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 2000, chains = 4)
param_hier <- extract(fit_hier)
y.obs  <- hist(y)
y.prd <-  hist(colMeans(param_hier$y_hat))
plot(  y.obs$counts, col="black", pch=19, xlab="テストの点数", ylab="人数")
points(y.prd$counts, col="red",   pch=19)
z.obs  <- hist(z)
z.prd <-  hist(colMeans(param_hier$z))
plot(  z.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(z.prd$counts, col="red",   pch=19)
launch_shinystan(fit_hier)
fit_hier_v2 <- stan(fit = fit_hier, data = data_hier, iter = 20000, chains = 4, thin=10)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
#推定された解答力 z
z.obs  <- hist(z)
z.prd <-  hist(colMeans(param_hier$z))
plot(  z.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(z.prd$counts, col="red",   pch=19)
#解答力の個体差 beta
b.obs  <- hist(beta)
b.prd <-  hist(colMeans(param_hier$beta))
plot(  b.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(b.prd$counts, col="red",   pch=19)
i <- 10
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
i <- 100
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
#シミュレーションデータの作成
logistic <- function(x){1.0/(1+exp(-x))}
N     <- 100 #生徒の人数
M     <- 10  #テストの点数最大値
alpha <- 0.86 #解答力の平均
sigma <- 3.78 #解答力ばらつきの標準偏差
beta  <- rnorm(N, mean = 0, sd = sigma) #解答力のばらつき
z <- alpha + beta #解答力
p     <- logistic(alpha + beta) #各生徒の正答確率
y     <- sapply(p, function(P){rbinom(1, M, P)}) #各生徒の点数
#stanに渡すデータの作成
data_hier <- list(N=length(y), M=M, y=y)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 2000, chains = 4)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 2000, chains = 4)
param_hier <- extract(fit_hier)
y.obs  <- hist(y)
y.prd <-  hist(colMeans(param_hier$y_hat))
plot(  y.obs$counts, col="black", pch=19, xlab="テストの点数", ylab="人数")
points(y.prd$counts, col="red",   pch=19)
z.obs  <- hist(z)
z.prd <-  hist(colMeans(param_hier$z))
plot(  z.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(z.prd$counts, col="red",   pch=19)
hist(z)
#シミュレーションデータの作成
logistic <- function(x){1.0/(1+exp(-x))}
N     <- 100 #生徒の人数
M     <- 10  #テストの点数最大値
alpha <- 0.86 #解答力の平均
sigma <- 3.78 #解答力ばらつきの標準偏差
beta  <- rnorm(N, mean = 0, sd = sigma) #解答力のばらつき
z <- alpha + beta #解答力
p     <- logistic(alpha + beta) #各生徒の正答確率
y     <- sapply(p, function(P){rbinom(1, M, P)}) #各生徒の点数
data_hier <- list(N=length(y), M=M, y=y)
fit_hier <- stan(fit = fit_hier, data = data_hier, iter = 2000, chains = 4)
param_hier <- extract(fit_hier)
y.obs  <- hist(y)
y.prd <-  hist(colMeans(param_hier$y_hat))
plot(  y.obs$counts, col="black", pch=19, xlab="テストの点数", ylab="人数")
points(y.prd$counts, col="red",   pch=19)
z.obs  <- hist(z)
z.prd <-  hist(colMeans(param_hier$z))
plot(  z.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(z.prd$counts, col="red",   pch=19)
b.obs  <- hist(beta)
b.prd <-  hist(colMeans(param_hier$beta))
plot(  b.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(b.prd$counts, col="red",   pch=19)
# alpha
print(alpha)           #真値
mean(param_hier$alpha) #推定値
hist(param_hier$alpha, freq = FALSE) #分布
# sigma
print(sigma)             #真値
mean(param_hier$sigma)  #推定値
hist(param_hier$sigma, freq = FALSE)  #分布
i <- 100
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
hist(param_hier$beta[,i], freq = FALSE) #分布
p.obs  <- hist(p)
p.prd <-  hist(colMeans(param_hier$y_hat))
plot(  p.obs$counts, col="black", pch=19)
points(p.prd$counts, col="red",   pch=19)
y.obs  <- hist(y)
y.prd <-  hist(colMeans(param_hier$y_hat))
plot(  y.obs$counts, col="black", pch=19, xlab="テストの点数", ylab="人数")
points(y.prd$counts, col="red",   pch=19)
hist(colMeans(param_hier$z))
hist(z)
hist(colMeans(param_hier$z))
hist(beta)
hist(colMeans(param_hier$beta))
print(alpha)           #真値
mean(param_hier$alpha) #推定値
hist(param_hier$alpha, freq = FALSE) #分布
launch_shinystan(fit_hier)
fit_hier <- stan(file = "hierarchical.stan", data = data_hier, iter = 2000, chains = 4)
launch_shinystan(fit_hier)
y.obs  <- hist(y)
y.prd <-  hist(colMeans(param_hier$y_hat))
plot(  y.obs$counts, col="black", pch=19, xlab="テストの点数", ylab="人数")
points(y.prd$counts, col="red",   pch=19)
#推定された解答力 z
z.obs  <- hist(z)
z.prd <-  hist(colMeans(param_hier$z))
plot(  z.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(z.prd$counts, col="red",   pch=19)
#解答力の個体差 beta
b.obs  <- hist(beta)
b.prd <-  hist(colMeans(param_hier$beta))
plot(  b.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(b.prd$counts, col="red",   pch=19)
#パラメターの予実比較
# alpha
print(alpha)           #真値
mean(param_hier$alpha) #推定値
hist(param_hier$alpha, freq = FALSE) #分布
print(sigma)             #真値
mean(param_hier$sigma)  #推定値
hist(param_hier$sigma, freq = FALSE)  #分布
# i番目の生徒の beta
i <- 1
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
hist(param_hier$beta[,i], freq = FALSE) #分布
param_hier <- extract(fit_hier)
i <- 1
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
hist(param_hier$beta[,i], freq = FALSE) #分布
i <- 2
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
hist(param_hier$beta[,i], freq = FALSE) #分布
i <- 3
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
hist(param_hier$beta[,i], freq = FALSE)
i <- 4
print(beta[i])            #真値
mean(param_hier$beta[,i]) #推定値
hist(param_hier$beta[,i
b.obs  <- hist(beta)
b.prd <-  hist(colMeans(param_hier$beta))
plot(  b.obs$counts, col="black", pch=19, xlab="生徒の解答力", ylab="人数")
points(b.prd$counts, col="red",   pch=19)
hist(colMeans(param_hier$beta))
hist(beta)
hist(colMeans(param_hier$beta))
